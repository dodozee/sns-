server.port: 8080

logging:
  level:
    com.withsporst: DEBUG

spring:
  application:
    name: user-service
#  config:
#    import: optional:configserver:http://127.0.0.1:8888
#  cloud:
#    config:
#      name: user-service
#      profile: dev
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 54767115914-gcla0mork6h3156h4qcutjerm0mdf4fu.apps.googleusercontent.com
            client-secret: FYIqelYXgX
            scope: profile,email
          # 네이버는 Spring Security를 공식 지원하지 않기 때문에 CommonOAuth2Provider 에서 해주는 값들을 수동으로 입력한다.
          naver:
            client-id: bdIFdtnMMHEZN84F6lVg
            client-secret: FYIqelYXgX
#            redirect-uri: "http://localhost:8080/success"
            redirect-uri: "http://54.180.109.176:8000/user-service/login/oauth2/code/naver"
#            redirect-uri: "http://localhost:8080/login/oauth2/code/naver"
#            redirect-uri: http://user-service:8080/login/oauth2/code/naver
#            redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
            scope: name,email
            client-name: Naver
          kakao:
            client-id: 클라이언트 ID값
            client-secret: 클라이언트 시크릿값
            client-authentication-method: client_secret_post
            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            client-name: kakao
            scope:
              - profile
              - account_email
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            # 기준이 되는 user_name 의 이름을 네이버에서는 response로 지정해야한다. (네이버 회원 조회시 반환되는 JSON 형태 떄문이다)
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id


  datasource:
#   userdb로 바꿔야함
#    url: jdbc:mysql://localhost:3306/mysql
    url: jdbc:mysql://mysql:3306/mysql?useSSL=false
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: 12341234
#driver-class-name: com.mysql.cj.jdbc.Driver
#  url: jdbc:mysql://localhost:{포트번호}/{데이터베이스 이름}?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8
#  username: root
#  password: {root password}
  jpa:
    hibernate:
      ddl-auto: create-drop
    generate-ddl: true
    open-in-view: false
    properties:
      hibernate:
        default_batch_fetch_size: 1000

#  spring:
#    redis:
#      host: localhost
#      port: 6379

token:
  access-expired-time: 7200000
  refresh-expired-time: 604800000
  secret: A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0U1V2W3X4Y5Z6
#  secret: $9a$39$k942Y7Y20xqkFt1qbODZIO4OMTeOxnrCe7tF3n5bazJinVE7VH5Pi
  access-token-name: access-token
  refresh-token-name: refresh-token

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
    fetch-registry: true
    register-with-eureka: true
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
