server:
  port: 8000
  ssl:
    enabled: true
#    key-alias: withsports-ssl
    key-store-password: 12341234
    key-store: classpath:keystore.p12
    key-store-type: PKCS12


eureka:
  client:
    allow-redirects: true
    register-with-eureka: true
    service-url:
      defaultZone: http://localhost:8761/eureka/

spring:
  application:
    name: api-gateway-service

  config:
    import: optional:configserver:http://127.0.0.1:8888


  cloud:
    config:
      name: bootstrap
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "https://sony-babba.vercel.app"
#              - "https://nid.naver.com"
            allowedMethods:
              - GET
              - POST
              - DELETE
              - PUT
              - OPTIONS
              - DELETE
              - PATCH
            allowedHeaders: '*'
            allow-credentials: true

      routes:
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            - RewritePath=/user-service/(?<segment>.*),/$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/reissue
            - Method=GET
          filters:
            - RewritePath=/user-service/(?<segment>.*),/$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/logout
            - Method=POST
          filters:
            - RewritePath=/user-service/(?<segment>.*),/$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/auth/reissue
            - Method=GET
          filters:
            - RewritePath=/user-service/(?<segment>.*),/$\{segment}


        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/oauth2/authorization/*
          filters:
            - RewritePath=/user-service/(?<segment>.*),/$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/*/oauth2/code/*
          filters:
            - RewritePath=/user-service/(?<segment>.*),/$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
          filters:
            - AuthorizationHeaderFilter
            - RewritePath=/user-service/(?<segment>.*),/$\{segment}

        - id: team-service
          uri: lb://TEAM-SERVICE
          predicates:
            - Path=/team-service/**
          filters:
            - AuthorizationHeaderFilter
            - RewritePath=/team-service/(?<segment>.*), /$\{segment}
            - name : RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 3
                redis-rate-limiter.burstCapacity: 3
                key-resolver: "#{@tokenKeyResolver}"
        #        연습삼아서 만들어본거
        - id: team-service
          uri: lb://TEAM-SERVICE
          predicates:
            - Path=/user-service/**
          filters:
            - AuthorizationHeaderFilter
            - RewritePath=/user-service/(?<segment>.*),/$\{segment}


        - id: record-service
          uri: lb://RECORD-SERVICE
          predicates:
            - Path=/record-service/**
          filters:
            - AuthorizationHeaderFilter
            - RewritePath=/record-service/(?<segment>.*), /$\{segment}

        - id: gifticon-service
          uri: lb://GIFTICON-SERVICE
          predicates:
            - Path=/gifticon-service/**
          filters:
            - AuthorizationHeaderFilter
            - RewritePath=/gifticon-service/(?<segment>.*), /$\{segment}


        - id: point-service
          uri: lb://POINT-SERVICE
          predicates:
            - Path=/point-service/**
          filters:
            - AuthorizationHeaderFilter
            - RewritePath=/point-service/(?<segment>.*), /$\{segment}

        - id: booking-service
          uri: lb://BOOKING-SERVICE
          predicates:
            - Path=/booking-service/**
          filters:
            - AuthorizationHeaderFilter
            - RewritePath=/booking-service/(?<segment>.*), /$\{segment}

        - id: matching-service
          uri: lb://MATCHING-SERVICE
          predicates:
            - Path=/matching-service/**
          filters:
            - AuthorizationHeaderFilter
            - RewritePath=/matching-service/(?<segment>.*), /$\{segment}
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 3
                redis-rate-limiter.burstCapacity: 3
                key-resolver: "#{@tokenKeyResolver}"

        - id: notification-service
          uri: lb://NOTIFICATION-SERVICE
          predicates:
            - Path=/notification-service/**
          filters:
            - AuthorizationHeaderFilter
            - RewritePath=/notification-service/(?<segment>.*), /$\{segment}




token:
  access-expired-time: 7200000
  refresh-expired-time: 604800000
  secret: A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0U1V2W3X4Y5Z6
  access-token-name: access-token
  refresh-token-name: refresh-token
