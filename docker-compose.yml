version: "3"

services:
  zookeeper:
      container_name: zookeeper
      image: zookeeper
      ports:
        - "2181:2181"
      networks:
        withsports-network:
          ipv4_address: 172.18.0.100

  kafka-1:
      container_name: kafka-1
      image: wurstmeister/kafka
      ports:
        - "9092:9092"
      environment:
        KAFKA_ADVERTISED_HOST_NAME: 172.18.0.151
        KAFKA_CREATE_TOPICS: "test1:1:1"
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_PORT: 9092
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
      depends_on:
        - zookeeper
      networks:
        withsports-network:
          ipv4_address: 172.18.0.151

  kafka-2:
    container_name: kafka-2
    image: wurstmeister/kafka
    ports:
      - "9093:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 172.18.0.152
      KAFKA_CREATE_TOPICS: "test2:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_PORT: 9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
      - kafka-1
    networks:
      withsports-network:
        ipv4_address: 172.18.0.152


  kafka-3:
    container_name: kafka-3
    image: wurstmeister/kafka
    ports:
      - "9094:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 172.18.0.153
      KAFKA_CREATE_TOPICS: "test3:1:1"
      KAFKA_ADVERTISED_PORT: 9094
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
      - kafka-2
    networks:
      withsports-network:
        ipv4_address: 172.18.0.153


  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    restart: "always"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKER_CONNECT: "kafka-1:9092,kafka-2:9093,kafka-3:9094"
    networks:
      withsports-network:





  debezium-connector:
    container_name: debezium-connector
    image: debezium/connect:1.7
    ports:
      - 8083:8083
    environment:
      BOOTSTRAP_SERVERS: "172.18.0.151:9092,172.18.0.152:9093,172.18.0.153:9094"
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: "my_connect_configs"
      OFFSET_STORAGE_TOPIC: "my_connect_offsets"
      STATUS_STORAGE_TOPIC: "my_connect_statuses"
      KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      AUTO_OFFSET_RESET: "earliest"
      MAX_POLL_RECORDS: "500"
      CONNECT_TIMEOUT_MS: "30000"
      MAX_RETRIES: "10"
      RETRY_BACKOFF_MS: "1000"

    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - gifticon-db
    networks:
      withsports-network:
        ipv4_address: 172.18.0.200

  init-kafka-connector:
    container_name: init-kafka-connector
    image: curlimages/curl:latest
    volumes:
      - ./init-kafka-connect.sh:/init-kafka-connect.sh
    command: ["sh", "/init-kafka-connect.sh", "172.18.0.200"]
    depends_on:
      - debezium-connector
    networks:
      withsports-network:






  user-db:
    container_name: user-db
    image: mysql:8
    restart: always
    ports:
      - 3306:3306
    environment:
      MYSQL_DATABASE: userdb
      MYSQL_ROOT_PASSWORD: 12341234
      TZ: Asia/Seoul
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./data/mysql/:/var/lib/mysql
    networks:
      - withsports-network


  team-db:
    container_name: team-db
    image: mysql:8
    restart: always
    ports:
      - 3307:3306
    environment:
      MYSQL_DATABASE: teamdb
      MYSQL_ROOT_PASSWORD: 12341234
      TZ: Asia/Seoul
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./data/mysql/:/var/lib/mysql
    networks:
      - withsports-network


  notification-db:
    container_name: notification-db
    image: mysql:8
    restart: always
    ports:
      - 3308:3306
    environment:
      MYSQL_DATABASE: notificationdb
      MYSQL_ROOT_PASSWORD: 12341234
      TZ: Asia/Seoul
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./data/mysql/:/var/lib/mysql
    networks:
      - withsports-network

  matching-db:
    container_name: matching-db
    image: mysql:8
    restart: always
    ports:
      - 3309:3306
    environment:
      MYSQL_DATABASE: matchingdb
      MYSQL_ROOT_PASSWORD: 12341234
      TZ: Asia/Seoul
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./data/mysql/:/var/lib/mysql
    networks:
      - withsports-network


  record-db:
    container_name: record-db
    image: mysql:8
    restart: always
    ports:
      - 3310:3306
    environment:
      MYSQL_DATABASE: recorddb
      MYSQL_ROOT_PASSWORD: 12341234
      TZ: Asia/Seoul
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./data/mysql/:/var/lib/mysql
    networks:
      - withsports-network

  gifticon-db:
    container_name: gifticon-db
    image: mysql:8
    restart: always
    ports:
      - 3311:3306
    environment:
      MYSQL_DATABASE: gifticondb
      MYSQL_ROOT_PASSWORD: 12341234
      TZ: UTC
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./data/mysql/:/var/lib/mysql
    networks:
      - withsports-network

  point-db:
    container_name: point-db
    image: mysql:8
    restart: always
    ports:
      - 3312:3306
    environment:
      MYSQL_DATABASE: pointdb
      MYSQL_ROOT_PASSWORD: 12341234
      TZ: Asia/Seoul
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./data/mysql/:/var/lib/mysql
    networks:
      - withsports-network

  booking-db:
    container_name: booking-db
    image: mysql:8
    restart: always
    ports:
      - 3313:3306
    environment:
      MYSQL_DATABASE: bookingdb
      MYSQL_ROOT_PASSWORD: 12341234
      TZ: Asia/Seoul
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./data/mysql/:/var/lib/mysql
    networks:
      - withsports-network



  redis:
    container_name: redis
    image: redis:alpine
    command: redis-server --port 6379
    hostname: redis_boot
    labels:
      - "name=redis"
      - "mode=standalone"
    ports:
      - 6379:6379
    networks:
      - withsports-network

  redis-matching:
    container_name: redis-matching
    image: redis:alpine
    command: redis-server --port 6379
    hostname: redis_boot
    labels:
      - "name=redis"
      - "mode=standalone"
    ports:
      - 6380:6379
    networks:
      withsports-network:
        ipv4_address: 172.18.0.104

  discovery:
    container_name: discovery
    build:
      context: ./discovery-service/
      dockerfile: Dockerfile
    ports:
      - 8761:8761
    networks:
      - withsports-network

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - 9411:9411
    networks:
      - withsports-network

  api-gateway:
    container_name: api-gateway
    build:
      context: ./apigateway-service/
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    networks:
      - withsports-network
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery:8761/eureka/
    depends_on:
      - discovery

  user-service:
    container_name: user
    build:
      context: ./user-service/
      dockerfile: Dockerfile
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery:8761/eureka/
      - spring.datasource.url=jdbc:mysql://user-db:3306/userdb
      - spring.redis.host=redis
      - kafka.bootstrap.servers=172.18.0.151:9092,172.18.0.152:9093,172.18.0.153:9094

    depends_on:
      - discovery
      - user-db
      - redis
      - kafka-1
      - kafka-2
      - kafka-3
    restart: always
    networks:
      - withsports-network

  team-service:
    container_name: team
    build:
      context: ./team-service/
      dockerfile: Dockerfile
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery:8761/eureka/
      - spring.zipkin.base-url=http://zipkin:9411
      - spring.datasource.url=jdbc:mysql://team-db:3306/teamdb
      - kafka.bootstrap.servers=172.18.0.151:9092,172.18.0.152:9093,172.18.0.153:9094
    depends_on:
      - discovery
      - team-db
      - kafka-1
      - kafka-2
      - kafka-3

    restart: always
    networks:
      - withsports-network


  matching-service:
    container_name: matching
    build:
      context: ./matching-service/
      dockerfile: Dockerfile
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery:8761/eureka/
      - spring.datasource.url=jdbc:mysql://matching-db:3306/matchingdb
      - spring.redis.host=redis
      - kafka.bootstrap.servers=172.18.0.151:9092,172.18.0.152:9093,172.18.0.153:9094
      - spring.zipkin.base-url=http://zipkin:9411
    depends_on:
      - discovery
      - matching-db
      - redis-matching
      - kafka-1
      - kafka-2
      - kafka-3

    restart: always
    networks:
      - withsports-network

  record-service:
    container_name: record
    build:
      context: ./record-service/
      dockerfile: Dockerfile
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery:8761/eureka/
      - spring.datasource.url=jdbc:mysql://record-db:3306/recorddb
      - kafka.bootstrap.servers=172.18.0.151:9092,172.18.0.152:9093,172.18.0.153:9094
      - spring.zipkin.base-url=http://zipkin:9411
    depends_on:
      - discovery
      - record-db
      - kafka-1
      - kafka-2
      - kafka-3

    restart: always
    networks:
      - withsports-network

  notification-service:
    container_name: notification
    build:
      context: ./notification-service/
      dockerfile: Dockerfile
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery:8761/eureka/
      - spring.datasource.url=jdbc:mysql://notification-db:3306/notificationdb
      - spring.zipkin.base-url=http://zipkin:9411

    depends_on:
      - discovery
      - notification-db
    restart: always
    networks:
      - withsports-network

  gifticon-service:
    container_name: gifticon
    build:
      context: ./gifticon-service/
      dockerfile: Dockerfile
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery:8761/eureka/
      - spring.datasource.url=jdbc:mysql://gifticon-db:3306/gifticondb
      - kafka.bootstrap.servers=172.18.0.151:9092,172.18.0.152:9093,172.18.0.153:9094
      - spring.zipkin.base-url=http://zipkin:9411
    #    ports:
    #      - 8081:8080
    depends_on:
      - discovery
      - gifticon-db
      - kafka-1
      - kafka-2
      - kafka-3

    restart: always
    networks:
      - withsports-network

  point-service:
    container_name: point
    build:
      context: ./point-service/
      dockerfile: Dockerfile
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery:8761/eureka/
      - spring.datasource.url=jdbc:mysql://point-db:3306/pointdb
      - kafka.bootstrap.servers=172.18.0.151:9092,172.18.0.152:9093,172.18.0.153:9094

    depends_on:
      - discovery
      - point-db
      - kafka-1
      - kafka-2
      - kafka-3

    restart: always
    networks:
      - withsports-network

  booking-service:
    container_name: booking
    build:
      context: ./booking-service/
      dockerfile: Dockerfile
    environment:
      - eureka.client.serviceUrl.defaultZone=http://discovery:8761/eureka/
      - spring.datasource.url=jdbc:mysql://booking-db:3306/bookingdb
      - kafka.bootstrap.servers=172.18.0.151:9092,172.18.0.152:9093,172.18.0.153:9094

    depends_on:
      - discovery
      - booking-db
      - kafka-1
      - kafka-2
      - kafka-3

    restart: always
    networks:
      - withsports-network

networks:
  withsports-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
          gateway: 172.18.0.1


